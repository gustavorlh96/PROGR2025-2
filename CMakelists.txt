cmake_minimum_required(VERSION 3.11)
project(PG2025-2)

# Define o padrão do C++
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Ativa o FetchContent
include(FetchContent)

# Configura o FetchContent para baixar e compilar GLFW automaticamente
FetchContent_Declare(
  glfw
  GIT_REPOSITORY https://github.com/glfw/glfw.git
  GIT_TAG master  # Define a versão desejada da GLFW
)
FetchContent_MakeAvailable(glfw)

FetchContent_Declare(
  glm
  GIT_REPOSITORY https://github.com/g-truc/glm.git
  GIT_TAG master
)
FetchContent_MakeAvailable(glm)

# Configura o FetchContent para baixar a stb_image automaticamente
FetchContent_Declare(
  stb_image
  GIT_REPOSITORY https://github.com/nothings/stb.git
  GIT_TAG master
)
FetchContent_MakeAvailable(stb_image)

# Adiciona as pastas de cabeçalhos
include_directories(${CMAKE_SOURCE_DIR}/include)
include_directories(${CMAKE_SOURCE_DIR}/common)
include_directories(${CMAKE_SOURCE_DIR}/include/glad)
include_directories(${glm_SOURCE_DIR})
include_directories(${stb_image_SOURCE_DIR})

# Lista de exercícios/projetos (um diretório para cada)
# OBS.: Não pode ter acentos ou caracteres especiais
set(EXERCISES
    Exercicios/Lista1/L1Ex5a
    Exercicios/Lista1/L1Ex5b
    Exercicios/Lista1/L1Ex5c
    Exercicios/Lista1/L1Ex5d
    Exercicios/Lista1/L1Ex6
    Exercicios/Lista1/L1Ex6a
    Exercicios/Lista1/L1Ex6b
    Exercicios/Lista1/L1Ex6c
    Exercicios/Lista1/L1Ex6d
    Exercicios/Lista1/L1Ex6e
    Exercicios/Lista1/L1Ex7
    Exercicios/Lista1/L1Ex8
    Exercicios/Lista1/L1Ex9
    Exercicios/Lista2/L2Ex1
    Exercicios/Lista2/L2Ex2
    Exercicios/Lista2/L2Ex3
    Exercicios/Lista2/L2Ex4
    Exercicios/Lista2/L2Ex5
    Exercicios/Lista2/L2Ex6
)

add_compile_options(-Wno-pragmas)

# Define as bibliotecas para cada sistema operacional
if(WIN32)
    set(OPENGL_LIBS opengl32)
elseif(APPLE)
    find_library(OpenGL_LIBRARY OpenGL)
    set(OPENGL_LIBS ${OpenGL_LIBRARY})
else()
    find_package(OpenGL REQUIRED)
    set(OPENGL_LIBS ${OPENGL_gl_LIBRARY})
endif()

# Caminho esperado para a GLAD
set(GLAD_C_FILE "${CMAKE_SOURCE_DIR}/common/glad.c")

# Verifica se os arquivos da GLAD estão no lugar
if (NOT EXISTS ${GLAD_C_FILE})
    message(FATAL_ERROR "Arquivo glad.c não encontrado! 
    Baixe a GLAD manualmente em https://glad.dav1d.de/ 
    e coloque glad.h em include/glad/ e glad.c em common/")
endif()

# Cria os executáveis (um por diretório listado em EXERCISES)
foreach(EXERCISE ${EXERCISES})
    # Extrai o nome da pasta como nome do executável
    get_filename_component(EXE_NAME ${EXERCISE} NAME)

    # Coleta todos os .cpp dentro do diretório do exercício
    file(GLOB EXE_SOURCES src/${EXERCISE}/*.cpp)

    # Cria o executável com todos os .cpp + glad.c
    add_executable(${EXE_NAME} ${EXE_SOURCES} ${GLAD_C_FILE})

    # Configura includes e bibliotecas
    target_include_directories(${EXE_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/include/glad ${glm_SOURCE_DIR} ${stb_image_SOURCE_DIR})


    target_link_libraries(${EXE_NAME} glfw ${OPENGL_LIBS} glm::glm )
endforeach()